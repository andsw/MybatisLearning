<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cnjxufe.bean.DepartmentMapper">
    <select id="getDepartmentById" databaseId="sql_server" resultType="cnjxufe.bean.Department">
        select *
        from tbl_ss_department
        where department_id = #{department_id};
    </select>

    <resultMap id="getDepartmentWithLAllEmployee" type="cnjxufe.bean.Department">
        <id column="department_id" property="departmentId"/>
        <result column="department_name" property="departmentName"/>
        <collection property="employees" ofType="cnjxufe.bean.Employee">
            <id column="id" property="id"/>
            <result column="last_name" property="lastName"/>
            <result column="email" property="email"/>
            <result column="gender" property="gender"/>
        </collection>
    </resultMap>

    <select id="getDepartmentByIdWithAllEmployees" databaseId="sql_server"
            resultMap="getDepartmentWithLAllEmployee">
        select d.*, e.id id, e.last_name last_name, e.gender gender, e.email email
        from tbl_ss_department d,
             tbl_ss_employee e
        where d.department_id = #{department_id}
          and e.department_id = d.department_id;
    </select>

    <!--分步查询结果集-->
    <resultMap id="collectionByStepMap" type="cnjxufe.bean.Department">
        <id column="department_id" property="departmentId"/>
        <result column="department_name" property="departmentName"/>
        <!--collection中column写的是部门的id，即是传参数值给第二步操作。-->
        <!--注释掉写discrimination-->
        <collection property="employees" ofType="cnjxufe.bean.Employee"
                    select="cnjxufe.bean.EmployeeMapper.getEmployeesByDepartmentId"
                    column="department_id" fetchType="lazy">
        </collection>
    </resultMap>

    <!--扩展：
            上述column也能传递多个参数值
            即将参数值封装成map形式：
            {parameter1=value1， key2=value2}

        还有：
        fetchType属性：取值 eager|lazy（默认lazy）
        lazy就是延迟加载，eager就是取消延迟加载，即获取department信息的同时加载员工信息！
    -->

    <!--Department getDepartmentByIdAndStep(Integer departmentId);-->
    <select id="getDepartmentByIdAndStep" databaseId="sql_server"
            resultMap="collectionByStepMap">
        select *
        from tbl_ss_department
        where department_id = #{departmentId};
    </select>
</mapper>