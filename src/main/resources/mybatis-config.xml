<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">


<!--创建SqlSessionFactory的配置-->

<!--注意这个配置文件的所有标签都要按照顺序来，就像刚才在下面写settings就会报错，连之前能正常运行的test文件都不能运行-->
<!--所匹配的顺序为：-->
<!--(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?
,plugins?,environments?,databaseIdProvider?,mappers?)-->
<configuration>

    <properties resource="database_config.properties">
        <!-- 允许下方username使用默认值设定！ -->
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        <!-- Change default value of separator -->
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>
        <!--可以在文件中配置，也能在外部配置，外部配置的不可以覆盖文件内容！-->
        <property name="password" value="123"/>
    </properties>

    <!--即使有些setting的值默认的也满足条件，也应该显式表现出来，以防版本更新导致出现错误！
    比如 aggressiveLazyLoading属性， 在版本3.4.1之前默认是true，之后的版本都默认是false！-->
    <settings>
        <!--将数据库中下划线分隔单词的命名格式转换成java中的驼峰命名格式！-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--
        延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。
        特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。
        默认值是false。
        设置为true即打开延迟加载开关！
        -->
        <!--何为延迟加载？
            比如，当我们获取一张订单的信息时，没有延迟加载就会一次性地把所有的信息包括相关联的买家信息
            而有延迟加载可以在使用订单信息时只加载订单信息，用到与之相关联的买家信息时就会拿着买家id再
            去查询买家信息！
        -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--
        当开启时，任何方法的调用都会加载该对象的所有属性。
        否则，每个属性会按需加载（参考lazyLoadTriggerMethods).
        默认值是true。
        当设置为false时，积极加载变成消极加载，即被关联对象的属性只有在需要时才会被加载，否则一次性全部加载！
        -->
        <setting name="aggressiveLazyLoading" value="false"/>

        <!--
        不少应用服务器（如 Tomcat 和 WebShpere）的类路径中已经包含 Commons Logging，所以在这种配置环境
        下的 MyBatis 会把它作为日志工具，记住这点非常重要。这将意味着，在诸如 WebSphere 的环境中，它提供
        了 Commons Logging 的私有实现，你的 Log4J 配置将被忽略。MyBatis 将你的 Log4J 配置忽略掉是相当令
        人郁闷的（事实上，正是因为在这种配置环境下，MyBatis 才会选择使用 Commons Logging 而不是 Log4J）。
        如果你的应用部署在一个类路径已经包含 Commons Logging 的环境中，而你又想使用其它日志工具，你可以通
        过在 MyBatis 配置文件 mybatis-config.xml 里面添加一项 setting 来选择别的日志工具。
                                                                           \-\-\-\-\-来自官方文档
                                                         (http://www.mybatis.org/mybatis-3/zh/logging.html)
        -->
        <setting name="logImpl" value="LOG4J"/>
    </settings>

    <typeAliases>
        <!--指定要java类型的全名，默认别名是类名小写：employee
        设置成这样，就可以在映射中直接使用employee指代其全类名！
        修改employee_statement.xml文件中的类名，然后运行成功！-->
        <typeAlias type="cnjxufe.bean.Employee" alias="emp"/>

        <!--上面那种情况只能一次性给一个类起别名，如果我们有一个包下面的所有类都取别名，我们可以这样批量起别名-->
        <!--这个包下面的所有类的别名即类名小写！-->
        <!--注意！！！ 别名不区分大小写！-->
        <package name="cnjxufe.bean"/>

        <!--我们还可以使用注解方式来给类名起别名！即 @Alias("")，注意会出现别名冲突！-->

    </typeAliases>

    <typeHandlers>
        <!--这个是配置自定义的typeHandler地方！（具体查看官方文档！）-->
        <!--<typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>-->
    </typeHandlers>

    <!--数据库环境可以写多个，在default中写要使用的那个-->
    <environments default="dev_sql_server">
        <environment id="dev_mysql">
            <transactionManager type="JDBC"/>
            <!--type有三个值：POOLED UNPOOLED JNDI -->
            <dataSource type="POOLED">
                <property name="driver" value="${mysql.driver}"/>
                <property name="url" value="${mysql.url}"/>
                <!-- If 'username' property not present, username become 'root' -->
                <property name="username" value="${mysql.username?:root}"/>
                <property name="password" value="${mysql.password}"/>
            </dataSource>
        </environment>
        <environment id="dev_sql_server">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${sql_server.driver}"/>
                <property name="url" value="${sql_server.url}"/>
                <property name="username" value="${sql_server.username}"/>
                <property name="password" value="${sql_server.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--databaseIdProvider ：支持多种数据库厂商的，
    type="DB_VENDOR"作用是得到数据库厂商的标识（MYSQL，SQL Server，Oracle，xxx）标识是在
    每个数据库驱动中包含的，能通过java获取数据库元数据获取（DatabaseMetaData#getDatabaseProductName()）-->
    <databaseIdProvider type="DB_VENDOR">
        <!--为不同数据库产生别名！-->
        <property name="MySQL" value="mysql"/>
        <property name="SQL Server" value="sql_server"/>
        <!--<property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle" />-->
    </databaseIdProvider>

    <!--将我们写好的sql映射文件注册在全局配置文件中！-->
    <mappers>
        <!--
            mapper的相关属性：
                resource：类路径下的配置文件。
                url：网络或磁盘路径下的配置文件。
                class：直接放接口的全路径，
                    但接口必须和配置文件放在同一路径下，并且和接口同名！（有配置文件的）
                    没有配置文件的，所有sql写在注解中！（不推荐）
            或者可以使用package：
                写入包名，批量注解接口！
        -->
        <mapper resource="employee_statement.xml"/>
        <mapper resource="EmployeeMapper.xml"/>
        <mapper resource="EmployeeMapperPlus.xml"/>
        <mapper resource="DepartmentMapper.xml"/>
    </mappers>
</configuration>